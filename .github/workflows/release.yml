name: Build and Release

on:
  push:
    tags:
      - 'v*'
      - '!v*-alpha*'
      - '!v*-beta*'
      - '!v*-rc*'
  workflow_dispatch:

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            lib_name: gdserial.dll
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            lib_name: libgdserial.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            lib_name: libgdserial.so
          - os: macos-latest
            target: x86_64-apple-darwin
            lib_name: libgdserial.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            lib_name: libgdserial.dylib

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev
        # Install cross-compilation tools for ARM64
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libudev-dev:arm64
        fi

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}

    - name: Configure cross-compilation for Linux ARM64
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p .cargo
        cat > .cargo/config.toml << EOF
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        EOF
      shell: bash

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
      shell: bash

    - name: Upload build artifacts for assembly
      uses: actions/upload-artifact@v4
      with:
        name: gdserial-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/${{ matrix.lib_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create addon release structure
      run: |
        # Create addon directory structure
        mkdir -p release/addons/gdserial/bin/windows-x86_64
        mkdir -p release/addons/gdserial/bin/linux-x86_64
        mkdir -p release/addons/gdserial/bin/linux-arm64
        mkdir -p release/addons/gdserial/bin/macos-x86_64
        mkdir -p release/addons/gdserial/bin/macos-arm64

        # Copy platform-specific libraries
        cp gdserial-x86_64-pc-windows-msvc/gdserial.dll release/addons/gdserial/bin/windows-x86_64/
        cp gdserial-x86_64-unknown-linux-gnu/libgdserial.so release/addons/gdserial/bin/linux-x86_64/
        cp gdserial-aarch64-unknown-linux-gnu/libgdserial.so release/addons/gdserial/bin/linux-arm64/
        cp gdserial-x86_64-apple-darwin/libgdserial.dylib release/addons/gdserial/bin/macos-x86_64/
        cp gdserial-aarch64-apple-darwin/libgdserial.dylib release/addons/gdserial/bin/macos-arm64/
        
        # Copy addon files
        cp addons/gdserial/gdserial.gdextension release/addons/gdserial/
        cp addons/gdserial/plugin.cfg release/addons/gdserial/
        cp addons/gdserial/plugin.gd release/addons/gdserial/
        cp addons/gdserial/icon.png release/addons/gdserial/
        cp addons/gdserial/README.md release/addons/gdserial/ 2>/dev/null || true
        
        # Copy root documentation
        cp LICENSE release/
        cp README.md release/
        cp example.gd release/
        cp RELEASE_NOTES.md release/ 2>/dev/null || true
        
        # Create complete addon archive for Godot Asset Library
        cd release
        zip -r ../gdserial-complete-addon-v${{ github.ref_name }}.zip .
        tar -czf ../gdserial-complete-addon-v${{ github.ref_name }}.tar.gz .
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          gdserial-complete-addon-v${{ github.ref_name }}.zip
          gdserial-complete-addon-v${{ github.ref_name }}.tar.gz
        body: |
          ## GdSerial v${{ github.ref_name }}
          
          Serial communication library for Godot 4 with device name support.
          
          ### New Features
          - ✅ USB device name detection using product descriptors
          - ✅ Apple Silicon (ARM64) macOS support
          - ✅ Removed verbose logging on successful port operations
          - ✅ Clean, simple API with automatic device recognition
          
          ### Installation
          1. Download `gdserial-complete-addon-v${{ github.ref_name }}.zip`
          2. Extract to your Godot project
          3. Enable the plugin in Project Settings → Plugins
          
          ### Usage
          ```gdscript
          var serial = GdSerial.new()
          var ports = serial.list_ports()
          for i in range(ports.size()):
              var port = ports[i]
              print("Port: ", port["port_name"], " (", port["device_name"], ")")
          ```
          
          ### Supported Platforms
          - Windows x64
          - Linux x64
          - Linux ARM64 (Raspberry Pi, ARM servers)
          - macOS Intel (x86_64)
          - macOS Apple Silicon (ARM64)
          
          Ready for Godot Asset Library!
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}