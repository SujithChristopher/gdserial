name: CI Build Test

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - 'v*'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Build for ${{ matrix.platform }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: Windows x64
            lib_name: gdserial.dll
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: Linux x64
            lib_name: libgdserial.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: Linux ARM64
            lib_name: libgdserial.so
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macOS Intel
            lib_name: libgdserial.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macOS Apple Silicon
            lib_name: libgdserial.dylib

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev
        # Install cross-compilation tools for ARM64
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libudev-dev:arm64
        fi

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}

    - name: Configure cross-compilation for Linux ARM64
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p .cargo
        cat > .cargo/config.toml << EOF
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        EOF
      shell: bash

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
      shell: bash

    - name: Verify build artifact exists
      run: |
        if [ -f "target/${{ matrix.target }}/release/${{ matrix.lib_name }}" ]; then
          echo "✅ Build artifact found: target/${{ matrix.target }}/release/${{ matrix.lib_name }}"
          ls -lh "target/${{ matrix.target }}/release/${{ matrix.lib_name }}"
        else
          echo "❌ Build artifact not found!"
          exit 1
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gdserial-${{ matrix.target }}-test
        path: target/${{ matrix.target }}/release/${{ matrix.lib_name }}
        retention-days: 7

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: Check build results
      run: |
        echo "## Build Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All platform builds completed. Check individual job results above." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tested Platforms:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Windows x64" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Linux x64" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Linux ARM64" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS Intel (x86_64)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ macOS Apple Silicon (ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "> This is a test build. No release will be created." >> $GITHUB_STEP_SUMMARY
